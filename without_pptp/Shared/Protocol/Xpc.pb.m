// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Xpc.pb.h"
// @@protoc_insertion_point(imports)

@implementation XpcRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [XpcRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL TypeIsValidValue(Type value) {
  switch (value) {
    case TypeVersion:
    case TypePathes:
    case TypeStatus:
    case TypeConnect:
    case TypeDisconnect:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromType(Type value) {
  switch (value) {
    case TypeVersion:
      return @"TypeVersion";
    case TypePathes:
      return @"TypePathes";
    case TypeStatus:
      return @"TypeStatus";
    case TypeConnect:
      return @"TypeConnect";
    case TypeDisconnect:
      return @"TypeDisconnect";
    default:
      return nil;
  }
}

BOOL ProtocolIsValidValue(Protocol value) {
  switch (value) {
    case ProtocolPptp:
    case ProtocolL2Tp:
    case ProtocolTcp:
    case ProtocolUdp:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromProtocol(Protocol value) {
  switch (value) {
    case ProtocolPptp:
      return @"ProtocolPptp";
    case ProtocolL2Tp:
      return @"ProtocolL2Tp";
    case ProtocolTcp:
      return @"ProtocolTcp";
    case ProtocolUdp:
      return @"ProtocolUdp";
    default:
      return nil;
  }
}

BOOL ExtStatusIsValidValue(ExtStatus value) {
  switch (value) {
    case ExtStatusSuccess:
    case ExtStatusAuthFailed:
    case ExtStatusOtherFailed:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromExtStatus(ExtStatus value) {
  switch (value) {
    case ExtStatusSuccess:
      return @"ExtStatusSuccess";
    case ExtStatusAuthFailed:
      return @"ExtStatusAuthFailed";
    case ExtStatusOtherFailed:
      return @"ExtStatusOtherFailed";
    default:
      return nil;
  }
}

BOOL StatusIsValidValue(Status value) {
  switch (value) {
    case StatusOk:
    case StatusFail:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromStatus(Status value) {
  switch (value) {
    case StatusOk:
      return @"StatusOk";
    case StatusFail:
      return @"StatusFail";
    default:
      return nil;
  }
}

BOOL ServerStatusIsValidValue(ServerStatus value) {
  switch (value) {
    case ServerStatusConnected:
    case ServerStatusDisconnected:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromServerStatus(ServerStatus value) {
  switch (value) {
    case ServerStatusConnected:
      return @"ServerStatusConnected";
    case ServerStatusDisconnected:
      return @"ServerStatusDisconnected";
    default:
      return nil;
  }
}

@interface PathesRequest ()
@property (strong) NSString* ovpnPath;
@property (strong) NSString* pppdPath;
@end

@implementation PathesRequest

- (BOOL) hasOvpnPath {
  return !!hasOvpnPath_;
}
- (void) setHasOvpnPath:(BOOL) _value_ {
  hasOvpnPath_ = !!_value_;
}
@synthesize ovpnPath;
- (BOOL) hasPppdPath {
  return !!hasPppdPath_;
}
- (void) setHasPppdPath:(BOOL) _value_ {
  hasPppdPath_ = !!_value_;
}
@synthesize pppdPath;
- (instancetype) init {
  if ((self = [super init])) {
    self.ovpnPath = @"";
    self.pppdPath = @"";
  }
  return self;
}
static PathesRequest* defaultPathesRequestInstance = nil;
+ (void) initialize {
  if (self == [PathesRequest class]) {
    defaultPathesRequestInstance = [[PathesRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPathesRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultPathesRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasOvpnPath) {
    return NO;
  }
  if (!self.hasPppdPath) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOvpnPath) {
    [output writeString:1 value:self.ovpnPath];
  }
  if (self.hasPppdPath) {
    [output writeString:2 value:self.pppdPath];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasOvpnPath) {
    size_ += computeStringSize(1, self.ovpnPath);
  }
  if (self.hasPppdPath) {
    size_ += computeStringSize(2, self.pppdPath);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PathesRequest*) parseFromData:(NSData*) data {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromData:data] build];
}
+ (PathesRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PathesRequest*) parseFromInputStream:(NSInputStream*) input {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromInputStream:input] build];
}
+ (PathesRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PathesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromCodedInputStream:input] build];
}
+ (PathesRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesRequest*)[[[PathesRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PathesRequestBuilder*) builder {
  return [[PathesRequestBuilder alloc] init];
}
+ (PathesRequestBuilder*) builderWithPrototype:(PathesRequest*) prototype {
  return [[PathesRequest builder] mergeFrom:prototype];
}
- (PathesRequestBuilder*) builder {
  return [PathesRequest builder];
}
- (PathesRequestBuilder*) toBuilder {
  return [PathesRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOvpnPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ovpnPath", self.ovpnPath];
  }
  if (self.hasPppdPath) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pppdPath", self.pppdPath];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasOvpnPath) {
    [dictionary setObject: self.ovpnPath forKey: @"ovpnPath"];
  }
  if (self.hasPppdPath) {
    [dictionary setObject: self.pppdPath forKey: @"pppdPath"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PathesRequest class]]) {
    return NO;
  }
  PathesRequest *otherMessage = other;
  return
      self.hasOvpnPath == otherMessage.hasOvpnPath &&
      (!self.hasOvpnPath || [self.ovpnPath isEqual:otherMessage.ovpnPath]) &&
      self.hasPppdPath == otherMessage.hasPppdPath &&
      (!self.hasPppdPath || [self.pppdPath isEqual:otherMessage.pppdPath]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasOvpnPath) {
    hashCode = hashCode * 31 + [self.ovpnPath hash];
  }
  if (self.hasPppdPath) {
    hashCode = hashCode * 31 + [self.pppdPath hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PathesRequestBuilder()
@property (strong) PathesRequest* resultPathesRequest;
@end

@implementation PathesRequestBuilder
@synthesize resultPathesRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPathesRequest = [[PathesRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPathesRequest;
}
- (PathesRequestBuilder*) clear {
  self.resultPathesRequest = [[PathesRequest alloc] init];
  return self;
}
- (PathesRequestBuilder*) clone {
  return [PathesRequest builderWithPrototype:resultPathesRequest];
}
- (PathesRequest*) defaultInstance {
  return [PathesRequest defaultInstance];
}
- (PathesRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PathesRequest*) buildPartial {
  PathesRequest* returnMe = resultPathesRequest;
  self.resultPathesRequest = nil;
  return returnMe;
}
- (PathesRequestBuilder*) mergeFrom:(PathesRequest*) other {
  if (other == [PathesRequest defaultInstance]) {
    return self;
  }
  if (other.hasOvpnPath) {
    [self setOvpnPath:other.ovpnPath];
  }
  if (other.hasPppdPath) {
    [self setPppdPath:other.pppdPath];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PathesRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PathesRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setOvpnPath:[input readString]];
        break;
      }
      case 18: {
        [self setPppdPath:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasOvpnPath {
  return resultPathesRequest.hasOvpnPath;
}
- (NSString*) ovpnPath {
  return resultPathesRequest.ovpnPath;
}
- (PathesRequestBuilder*) setOvpnPath:(NSString*) value {
  resultPathesRequest.hasOvpnPath = YES;
  resultPathesRequest.ovpnPath = value;
  return self;
}
- (PathesRequestBuilder*) clearOvpnPath {
  resultPathesRequest.hasOvpnPath = NO;
  resultPathesRequest.ovpnPath = @"";
  return self;
}
- (BOOL) hasPppdPath {
  return resultPathesRequest.hasPppdPath;
}
- (NSString*) pppdPath {
  return resultPathesRequest.pppdPath;
}
- (PathesRequestBuilder*) setPppdPath:(NSString*) value {
  resultPathesRequest.hasPppdPath = YES;
  resultPathesRequest.pppdPath = value;
  return self;
}
- (PathesRequestBuilder*) clearPppdPath {
  resultPathesRequest.hasPppdPath = NO;
  resultPathesRequest.pppdPath = @"";
  return self;
}
@end

@interface VersionResponse ()
@property SInt32 majorVersion;
@property SInt32 minorVersion;
@end

@implementation VersionResponse

- (BOOL) hasMajorVersion {
  return !!hasMajorVersion_;
}
- (void) setHasMajorVersion:(BOOL) _value_ {
  hasMajorVersion_ = !!_value_;
}
@synthesize majorVersion;
- (BOOL) hasMinorVersion {
  return !!hasMinorVersion_;
}
- (void) setHasMinorVersion:(BOOL) _value_ {
  hasMinorVersion_ = !!_value_;
}
@synthesize minorVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.majorVersion = 0;
    self.minorVersion = 0;
  }
  return self;
}
static VersionResponse* defaultVersionResponseInstance = nil;
+ (void) initialize {
  if (self == [VersionResponse class]) {
    defaultVersionResponseInstance = [[VersionResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultVersionResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultVersionResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasMajorVersion) {
    return NO;
  }
  if (!self.hasMinorVersion) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMajorVersion) {
    [output writeInt32:1 value:self.majorVersion];
  }
  if (self.hasMinorVersion) {
    [output writeInt32:2 value:self.minorVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMajorVersion) {
    size_ += computeInt32Size(1, self.majorVersion);
  }
  if (self.hasMinorVersion) {
    size_ += computeInt32Size(2, self.minorVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (VersionResponse*) parseFromData:(NSData*) data {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromData:data] build];
}
+ (VersionResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (VersionResponse*) parseFromInputStream:(NSInputStream*) input {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromInputStream:input] build];
}
+ (VersionResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VersionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromCodedInputStream:input] build];
}
+ (VersionResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (VersionResponse*)[[[VersionResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (VersionResponseBuilder*) builder {
  return [[VersionResponseBuilder alloc] init];
}
+ (VersionResponseBuilder*) builderWithPrototype:(VersionResponse*) prototype {
  return [[VersionResponse builder] mergeFrom:prototype];
}
- (VersionResponseBuilder*) builder {
  return [VersionResponse builder];
}
- (VersionResponseBuilder*) toBuilder {
  return [VersionResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMajorVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"majorVersion", [NSNumber numberWithInteger:self.majorVersion]];
  }
  if (self.hasMinorVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minorVersion", [NSNumber numberWithInteger:self.minorVersion]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMajorVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.majorVersion] forKey: @"majorVersion"];
  }
  if (self.hasMinorVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.minorVersion] forKey: @"minorVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[VersionResponse class]]) {
    return NO;
  }
  VersionResponse *otherMessage = other;
  return
      self.hasMajorVersion == otherMessage.hasMajorVersion &&
      (!self.hasMajorVersion || self.majorVersion == otherMessage.majorVersion) &&
      self.hasMinorVersion == otherMessage.hasMinorVersion &&
      (!self.hasMinorVersion || self.minorVersion == otherMessage.minorVersion) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMajorVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.majorVersion] hash];
  }
  if (self.hasMinorVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minorVersion] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface VersionResponseBuilder()
@property (strong) VersionResponse* resultVersionResponse;
@end

@implementation VersionResponseBuilder
@synthesize resultVersionResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultVersionResponse = [[VersionResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultVersionResponse;
}
- (VersionResponseBuilder*) clear {
  self.resultVersionResponse = [[VersionResponse alloc] init];
  return self;
}
- (VersionResponseBuilder*) clone {
  return [VersionResponse builderWithPrototype:resultVersionResponse];
}
- (VersionResponse*) defaultInstance {
  return [VersionResponse defaultInstance];
}
- (VersionResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (VersionResponse*) buildPartial {
  VersionResponse* returnMe = resultVersionResponse;
  self.resultVersionResponse = nil;
  return returnMe;
}
- (VersionResponseBuilder*) mergeFrom:(VersionResponse*) other {
  if (other == [VersionResponse defaultInstance]) {
    return self;
  }
  if (other.hasMajorVersion) {
    [self setMajorVersion:other.majorVersion];
  }
  if (other.hasMinorVersion) {
    [self setMinorVersion:other.minorVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (VersionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (VersionResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMajorVersion:[input readInt32]];
        break;
      }
      case 16: {
        [self setMinorVersion:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMajorVersion {
  return resultVersionResponse.hasMajorVersion;
}
- (SInt32) majorVersion {
  return resultVersionResponse.majorVersion;
}
- (VersionResponseBuilder*) setMajorVersion:(SInt32) value {
  resultVersionResponse.hasMajorVersion = YES;
  resultVersionResponse.majorVersion = value;
  return self;
}
- (VersionResponseBuilder*) clearMajorVersion {
  resultVersionResponse.hasMajorVersion = NO;
  resultVersionResponse.majorVersion = 0;
  return self;
}
- (BOOL) hasMinorVersion {
  return resultVersionResponse.hasMinorVersion;
}
- (SInt32) minorVersion {
  return resultVersionResponse.minorVersion;
}
- (VersionResponseBuilder*) setMinorVersion:(SInt32) value {
  resultVersionResponse.hasMinorVersion = YES;
  resultVersionResponse.minorVersion = value;
  return self;
}
- (VersionResponseBuilder*) clearMinorVersion {
  resultVersionResponse.hasMinorVersion = NO;
  resultVersionResponse.minorVersion = 0;
  return self;
}
@end

@interface Server ()
@property SInt32 id;
@property (strong) NSString* country;
@property (strong) NSString* name;
@property (strong) NSString* dns;
@property SInt32 port;
@property Protocol protocol;
@property (strong) NSString* login;
@property (strong) NSString* password;
@end

@implementation Server

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) _value_ {
  hasCountry_ = !!_value_;
}
@synthesize country;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasDns {
  return !!hasDns_;
}
- (void) setHasDns:(BOOL) _value_ {
  hasDns_ = !!_value_;
}
@synthesize dns;
- (BOOL) hasPort {
  return !!hasPort_;
}
- (void) setHasPort:(BOOL) _value_ {
  hasPort_ = !!_value_;
}
@synthesize port;
- (BOOL) hasProtocol {
  return !!hasProtocol_;
}
- (void) setHasProtocol:(BOOL) _value_ {
  hasProtocol_ = !!_value_;
}
@synthesize protocol;
- (BOOL) hasLogin {
  return !!hasLogin_;
}
- (void) setHasLogin:(BOOL) _value_ {
  hasLogin_ = !!_value_;
}
@synthesize login;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = 0;
    self.country = @"";
    self.name = @"";
    self.dns = @"";
    self.port = 0;
    self.protocol = ProtocolPptp;
    self.login = @"";
    self.password = @"";
  }
  return self;
}
static Server* defaultServerInstance = nil;
+ (void) initialize {
  if (self == [Server class]) {
    defaultServerInstance = [[Server alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultServerInstance;
}
- (instancetype) defaultInstance {
  return defaultServerInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasCountry) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasDns) {
    return NO;
  }
  if (!self.hasPort) {
    return NO;
  }
  if (!self.hasProtocol) {
    return NO;
  }
  if (!self.hasLogin) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasCountry) {
    [output writeString:2 value:self.country];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasDns) {
    [output writeString:4 value:self.dns];
  }
  if (self.hasPort) {
    [output writeInt32:5 value:self.port];
  }
  if (self.hasProtocol) {
    [output writeEnum:6 value:self.protocol];
  }
  if (self.hasLogin) {
    [output writeString:7 value:self.login];
  }
  if (self.hasPassword) {
    [output writeString:8 value:self.password];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasCountry) {
    size_ += computeStringSize(2, self.country);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasDns) {
    size_ += computeStringSize(4, self.dns);
  }
  if (self.hasPort) {
    size_ += computeInt32Size(5, self.port);
  }
  if (self.hasProtocol) {
    size_ += computeEnumSize(6, self.protocol);
  }
  if (self.hasLogin) {
    size_ += computeStringSize(7, self.login);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(8, self.password);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Server*) parseFromData:(NSData*) data {
  return (Server*)[[[Server builder] mergeFromData:data] build];
}
+ (Server*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Server*) parseFromInputStream:(NSInputStream*) input {
  return (Server*)[[[Server builder] mergeFromInputStream:input] build];
}
+ (Server*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Server*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Server*)[[[Server builder] mergeFromCodedInputStream:input] build];
}
+ (Server*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Server*)[[[Server builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ServerBuilder*) builder {
  return [[ServerBuilder alloc] init];
}
+ (ServerBuilder*) builderWithPrototype:(Server*) prototype {
  return [[Server builder] mergeFrom:prototype];
}
- (ServerBuilder*) builder {
  return [Server builder];
}
- (ServerBuilder*) toBuilder {
  return [Server builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInteger:self.id]];
  }
  if (self.hasCountry) {
    [output appendFormat:@"%@%@: %@\n", indent, @"country", self.country];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDns) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dns", self.dns];
  }
  if (self.hasPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"port", [NSNumber numberWithInteger:self.port]];
  }
  if (self.hasProtocol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocol", NSStringFromProtocol(self.protocol)];
  }
  if (self.hasLogin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"login", self.login];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.id] forKey: @"id"];
  }
  if (self.hasCountry) {
    [dictionary setObject: self.country forKey: @"country"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasDns) {
    [dictionary setObject: self.dns forKey: @"dns"];
  }
  if (self.hasPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.port] forKey: @"port"];
  }
  if (self.hasProtocol) {
    [dictionary setObject: @(self.protocol) forKey: @"protocol"];
  }
  if (self.hasLogin) {
    [dictionary setObject: self.login forKey: @"login"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Server class]]) {
    return NO;
  }
  Server *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasCountry == otherMessage.hasCountry &&
      (!self.hasCountry || [self.country isEqual:otherMessage.country]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDns == otherMessage.hasDns &&
      (!self.hasDns || [self.dns isEqual:otherMessage.dns]) &&
      self.hasPort == otherMessage.hasPort &&
      (!self.hasPort || self.port == otherMessage.port) &&
      self.hasProtocol == otherMessage.hasProtocol &&
      (!self.hasProtocol || self.protocol == otherMessage.protocol) &&
      self.hasLogin == otherMessage.hasLogin &&
      (!self.hasLogin || [self.login isEqual:otherMessage.login]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.id] hash];
  }
  if (self.hasCountry) {
    hashCode = hashCode * 31 + [self.country hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDns) {
    hashCode = hashCode * 31 + [self.dns hash];
  }
  if (self.hasPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.port] hash];
  }
  if (self.hasProtocol) {
    hashCode = hashCode * 31 + self.protocol;
  }
  if (self.hasLogin) {
    hashCode = hashCode * 31 + [self.login hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ServerBuilder()
@property (strong) Server* resultServer;
@end

@implementation ServerBuilder
@synthesize resultServer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultServer = [[Server alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultServer;
}
- (ServerBuilder*) clear {
  self.resultServer = [[Server alloc] init];
  return self;
}
- (ServerBuilder*) clone {
  return [Server builderWithPrototype:resultServer];
}
- (Server*) defaultInstance {
  return [Server defaultInstance];
}
- (Server*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Server*) buildPartial {
  Server* returnMe = resultServer;
  self.resultServer = nil;
  return returnMe;
}
- (ServerBuilder*) mergeFrom:(Server*) other {
  if (other == [Server defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDns) {
    [self setDns:other.dns];
  }
  if (other.hasPort) {
    [self setPort:other.port];
  }
  if (other.hasProtocol) {
    [self setProtocol:other.protocol];
  }
  if (other.hasLogin) {
    [self setLogin:other.login];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ServerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ServerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setCountry:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setDns:[input readString]];
        break;
      }
      case 40: {
        [self setPort:[input readInt32]];
        break;
      }
      case 48: {
        Protocol value = (Protocol)[input readEnum];
        if (ProtocolIsValidValue(value)) {
          [self setProtocol:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 58: {
        [self setLogin:[input readString]];
        break;
      }
      case 66: {
        [self setPassword:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultServer.hasId;
}
- (SInt32) id {
  return resultServer.id;
}
- (ServerBuilder*) setId:(SInt32) value {
  resultServer.hasId = YES;
  resultServer.id = value;
  return self;
}
- (ServerBuilder*) clearId {
  resultServer.hasId = NO;
  resultServer.id = 0;
  return self;
}
- (BOOL) hasCountry {
  return resultServer.hasCountry;
}
- (NSString*) country {
  return resultServer.country;
}
- (ServerBuilder*) setCountry:(NSString*) value {
  resultServer.hasCountry = YES;
  resultServer.country = value;
  return self;
}
- (ServerBuilder*) clearCountry {
  resultServer.hasCountry = NO;
  resultServer.country = @"";
  return self;
}
- (BOOL) hasName {
  return resultServer.hasName;
}
- (NSString*) name {
  return resultServer.name;
}
- (ServerBuilder*) setName:(NSString*) value {
  resultServer.hasName = YES;
  resultServer.name = value;
  return self;
}
- (ServerBuilder*) clearName {
  resultServer.hasName = NO;
  resultServer.name = @"";
  return self;
}
- (BOOL) hasDns {
  return resultServer.hasDns;
}
- (NSString*) dns {
  return resultServer.dns;
}
- (ServerBuilder*) setDns:(NSString*) value {
  resultServer.hasDns = YES;
  resultServer.dns = value;
  return self;
}
- (ServerBuilder*) clearDns {
  resultServer.hasDns = NO;
  resultServer.dns = @"";
  return self;
}
- (BOOL) hasPort {
  return resultServer.hasPort;
}
- (SInt32) port {
  return resultServer.port;
}
- (ServerBuilder*) setPort:(SInt32) value {
  resultServer.hasPort = YES;
  resultServer.port = value;
  return self;
}
- (ServerBuilder*) clearPort {
  resultServer.hasPort = NO;
  resultServer.port = 0;
  return self;
}
- (BOOL) hasProtocol {
  return resultServer.hasProtocol;
}
- (Protocol) protocol {
  return resultServer.protocol;
}
- (ServerBuilder*) setProtocol:(Protocol) value {
  resultServer.hasProtocol = YES;
  resultServer.protocol = value;
  return self;
}
- (ServerBuilder*) clearProtocol {
  resultServer.hasProtocol = NO;
  resultServer.protocol = ProtocolPptp;
  return self;
}
- (BOOL) hasLogin {
  return resultServer.hasLogin;
}
- (NSString*) login {
  return resultServer.login;
}
- (ServerBuilder*) setLogin:(NSString*) value {
  resultServer.hasLogin = YES;
  resultServer.login = value;
  return self;
}
- (ServerBuilder*) clearLogin {
  resultServer.hasLogin = NO;
  resultServer.login = @"";
  return self;
}
- (BOOL) hasPassword {
  return resultServer.hasPassword;
}
- (NSString*) password {
  return resultServer.password;
}
- (ServerBuilder*) setPassword:(NSString*) value {
  resultServer.hasPassword = YES;
  resultServer.password = value;
  return self;
}
- (ServerBuilder*) clearPassword {
  resultServer.hasPassword = NO;
  resultServer.password = @"";
  return self;
}
@end

@interface PathesResponse ()
@property Status status;
@end

@implementation PathesResponse

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = StatusOk;
  }
  return self;
}
static PathesResponse* defaultPathesResponseInstance = nil;
+ (void) initialize {
  if (self == [PathesResponse class]) {
    defaultPathesResponseInstance = [[PathesResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPathesResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultPathesResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PathesResponse*) parseFromData:(NSData*) data {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromData:data] build];
}
+ (PathesResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PathesResponse*) parseFromInputStream:(NSInputStream*) input {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromInputStream:input] build];
}
+ (PathesResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PathesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromCodedInputStream:input] build];
}
+ (PathesResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PathesResponse*)[[[PathesResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PathesResponseBuilder*) builder {
  return [[PathesResponseBuilder alloc] init];
}
+ (PathesResponseBuilder*) builderWithPrototype:(PathesResponse*) prototype {
  return [[PathesResponse builder] mergeFrom:prototype];
}
- (PathesResponseBuilder*) builder {
  return [PathesResponse builder];
}
- (PathesResponseBuilder*) toBuilder {
  return [PathesResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromStatus(self.status)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PathesResponse class]]) {
    return NO;
  }
  PathesResponse *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PathesResponseBuilder()
@property (strong) PathesResponse* resultPathesResponse;
@end

@implementation PathesResponseBuilder
@synthesize resultPathesResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPathesResponse = [[PathesResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPathesResponse;
}
- (PathesResponseBuilder*) clear {
  self.resultPathesResponse = [[PathesResponse alloc] init];
  return self;
}
- (PathesResponseBuilder*) clone {
  return [PathesResponse builderWithPrototype:resultPathesResponse];
}
- (PathesResponse*) defaultInstance {
  return [PathesResponse defaultInstance];
}
- (PathesResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PathesResponse*) buildPartial {
  PathesResponse* returnMe = resultPathesResponse;
  self.resultPathesResponse = nil;
  return returnMe;
}
- (PathesResponseBuilder*) mergeFrom:(PathesResponse*) other {
  if (other == [PathesResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PathesResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PathesResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        Status value = (Status)[input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultPathesResponse.hasStatus;
}
- (Status) status {
  return resultPathesResponse.status;
}
- (PathesResponseBuilder*) setStatus:(Status) value {
  resultPathesResponse.hasStatus = YES;
  resultPathesResponse.status = value;
  return self;
}
- (PathesResponseBuilder*) clearStatus {
  resultPathesResponse.hasStatus = NO;
  resultPathesResponse.status = StatusOk;
  return self;
}
@end

@interface ConnectResponse ()
@property Status status;
@property ExtStatus extStatus;
@end

@implementation ConnectResponse

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasExtStatus {
  return !!hasExtStatus_;
}
- (void) setHasExtStatus:(BOOL) _value_ {
  hasExtStatus_ = !!_value_;
}
@synthesize extStatus;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = StatusOk;
    self.extStatus = ExtStatusSuccess;
  }
  return self;
}
static ConnectResponse* defaultConnectResponseInstance = nil;
+ (void) initialize {
  if (self == [ConnectResponse class]) {
    defaultConnectResponseInstance = [[ConnectResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (!self.hasExtStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasExtStatus) {
    [output writeEnum:2 value:self.extStatus];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasExtStatus) {
    size_ += computeEnumSize(2, self.extStatus);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectResponse*) parseFromData:(NSData*) data {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromData:data] build];
}
+ (ConnectResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectResponse*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromInputStream:input] build];
}
+ (ConnectResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectResponse*)[[[ConnectResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectResponseBuilder*) builder {
  return [[ConnectResponseBuilder alloc] init];
}
+ (ConnectResponseBuilder*) builderWithPrototype:(ConnectResponse*) prototype {
  return [[ConnectResponse builder] mergeFrom:prototype];
}
- (ConnectResponseBuilder*) builder {
  return [ConnectResponse builder];
}
- (ConnectResponseBuilder*) toBuilder {
  return [ConnectResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromStatus(self.status)];
  }
  if (self.hasExtStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extStatus", NSStringFromExtStatus(self.extStatus)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasExtStatus) {
    [dictionary setObject: @(self.extStatus) forKey: @"extStatus"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectResponse class]]) {
    return NO;
  }
  ConnectResponse *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasExtStatus == otherMessage.hasExtStatus &&
      (!self.hasExtStatus || self.extStatus == otherMessage.extStatus) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasExtStatus) {
    hashCode = hashCode * 31 + self.extStatus;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectResponseBuilder()
@property (strong) ConnectResponse* resultConnectResponse;
@end

@implementation ConnectResponseBuilder
@synthesize resultConnectResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectResponse = [[ConnectResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectResponse;
}
- (ConnectResponseBuilder*) clear {
  self.resultConnectResponse = [[ConnectResponse alloc] init];
  return self;
}
- (ConnectResponseBuilder*) clone {
  return [ConnectResponse builderWithPrototype:resultConnectResponse];
}
- (ConnectResponse*) defaultInstance {
  return [ConnectResponse defaultInstance];
}
- (ConnectResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectResponse*) buildPartial {
  ConnectResponse* returnMe = resultConnectResponse;
  self.resultConnectResponse = nil;
  return returnMe;
}
- (ConnectResponseBuilder*) mergeFrom:(ConnectResponse*) other {
  if (other == [ConnectResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasExtStatus) {
    [self setExtStatus:other.extStatus];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        Status value = (Status)[input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        ExtStatus value = (ExtStatus)[input readEnum];
        if (ExtStatusIsValidValue(value)) {
          [self setExtStatus:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultConnectResponse.hasStatus;
}
- (Status) status {
  return resultConnectResponse.status;
}
- (ConnectResponseBuilder*) setStatus:(Status) value {
  resultConnectResponse.hasStatus = YES;
  resultConnectResponse.status = value;
  return self;
}
- (ConnectResponseBuilder*) clearStatus {
  resultConnectResponse.hasStatus = NO;
  resultConnectResponse.status = StatusOk;
  return self;
}
- (BOOL) hasExtStatus {
  return resultConnectResponse.hasExtStatus;
}
- (ExtStatus) extStatus {
  return resultConnectResponse.extStatus;
}
- (ConnectResponseBuilder*) setExtStatus:(ExtStatus) value {
  resultConnectResponse.hasExtStatus = YES;
  resultConnectResponse.extStatus = value;
  return self;
}
- (ConnectResponseBuilder*) clearExtStatus {
  resultConnectResponse.hasExtStatus = NO;
  resultConnectResponse.extStatus = ExtStatusSuccess;
  return self;
}
@end

@interface DisconnectResponse ()
@property Status status;
@end

@implementation DisconnectResponse

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = StatusOk;
  }
  return self;
}
static DisconnectResponse* defaultDisconnectResponseInstance = nil;
+ (void) initialize {
  if (self == [DisconnectResponse class]) {
    defaultDisconnectResponseInstance = [[DisconnectResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDisconnectResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultDisconnectResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DisconnectResponse*) parseFromData:(NSData*) data {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromData:data] build];
}
+ (DisconnectResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DisconnectResponse*) parseFromInputStream:(NSInputStream*) input {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromInputStream:input] build];
}
+ (DisconnectResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DisconnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromCodedInputStream:input] build];
}
+ (DisconnectResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectResponse*)[[[DisconnectResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DisconnectResponseBuilder*) builder {
  return [[DisconnectResponseBuilder alloc] init];
}
+ (DisconnectResponseBuilder*) builderWithPrototype:(DisconnectResponse*) prototype {
  return [[DisconnectResponse builder] mergeFrom:prototype];
}
- (DisconnectResponseBuilder*) builder {
  return [DisconnectResponse builder];
}
- (DisconnectResponseBuilder*) toBuilder {
  return [DisconnectResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromStatus(self.status)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DisconnectResponse class]]) {
    return NO;
  }
  DisconnectResponse *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DisconnectResponseBuilder()
@property (strong) DisconnectResponse* resultDisconnectResponse;
@end

@implementation DisconnectResponseBuilder
@synthesize resultDisconnectResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDisconnectResponse = [[DisconnectResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDisconnectResponse;
}
- (DisconnectResponseBuilder*) clear {
  self.resultDisconnectResponse = [[DisconnectResponse alloc] init];
  return self;
}
- (DisconnectResponseBuilder*) clone {
  return [DisconnectResponse builderWithPrototype:resultDisconnectResponse];
}
- (DisconnectResponse*) defaultInstance {
  return [DisconnectResponse defaultInstance];
}
- (DisconnectResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DisconnectResponse*) buildPartial {
  DisconnectResponse* returnMe = resultDisconnectResponse;
  self.resultDisconnectResponse = nil;
  return returnMe;
}
- (DisconnectResponseBuilder*) mergeFrom:(DisconnectResponse*) other {
  if (other == [DisconnectResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DisconnectResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DisconnectResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        Status value = (Status)[input readEnum];
        if (StatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultDisconnectResponse.hasStatus;
}
- (Status) status {
  return resultDisconnectResponse.status;
}
- (DisconnectResponseBuilder*) setStatus:(Status) value {
  resultDisconnectResponse.hasStatus = YES;
  resultDisconnectResponse.status = value;
  return self;
}
- (DisconnectResponseBuilder*) clearStatus {
  resultDisconnectResponse.hasStatus = NO;
  resultDisconnectResponse.status = StatusOk;
  return self;
}
@end

@interface StatusResponse ()
@property ServerStatus status;
@property (strong) Server* server;
@end

@implementation StatusResponse

- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasServer {
  return !!hasServer_;
}
- (void) setHasServer:(BOOL) _value_ {
  hasServer_ = !!_value_;
}
@synthesize server;
- (instancetype) init {
  if ((self = [super init])) {
    self.status = ServerStatusConnected;
    self.server = [Server defaultInstance];
  }
  return self;
}
static StatusResponse* defaultStatusResponseInstance = nil;
+ (void) initialize {
  if (self == [StatusResponse class]) {
    defaultStatusResponseInstance = [[StatusResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultStatusResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultStatusResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasStatus) {
    return NO;
  }
  if (self.hasServer) {
    if (!self.server.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStatus) {
    [output writeEnum:1 value:self.status];
  }
  if (self.hasServer) {
    [output writeMessage:2 value:self.server];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStatus) {
    size_ += computeEnumSize(1, self.status);
  }
  if (self.hasServer) {
    size_ += computeMessageSize(2, self.server);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StatusResponse*) parseFromData:(NSData*) data {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromData:data] build];
}
+ (StatusResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StatusResponse*) parseFromInputStream:(NSInputStream*) input {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromInputStream:input] build];
}
+ (StatusResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StatusResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromCodedInputStream:input] build];
}
+ (StatusResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StatusResponse*)[[[StatusResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StatusResponseBuilder*) builder {
  return [[StatusResponseBuilder alloc] init];
}
+ (StatusResponseBuilder*) builderWithPrototype:(StatusResponse*) prototype {
  return [[StatusResponse builder] mergeFrom:prototype];
}
- (StatusResponseBuilder*) builder {
  return [StatusResponse builder];
}
- (StatusResponseBuilder*) toBuilder {
  return [StatusResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", NSStringFromServerStatus(self.status)];
  }
  if (self.hasServer) {
    [output appendFormat:@"%@%@ {\n", indent, @"server"];
    [self.server writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasStatus) {
    [dictionary setObject: @(self.status) forKey: @"status"];
  }
  if (self.hasServer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.server storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"server"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StatusResponse class]]) {
    return NO;
  }
  StatusResponse *otherMessage = other;
  return
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      self.hasServer == otherMessage.hasServer &&
      (!self.hasServer || [self.server isEqual:otherMessage.server]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStatus) {
    hashCode = hashCode * 31 + self.status;
  }
  if (self.hasServer) {
    hashCode = hashCode * 31 + [self.server hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StatusResponseBuilder()
@property (strong) StatusResponse* resultStatusResponse;
@end

@implementation StatusResponseBuilder
@synthesize resultStatusResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultStatusResponse = [[StatusResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultStatusResponse;
}
- (StatusResponseBuilder*) clear {
  self.resultStatusResponse = [[StatusResponse alloc] init];
  return self;
}
- (StatusResponseBuilder*) clone {
  return [StatusResponse builderWithPrototype:resultStatusResponse];
}
- (StatusResponse*) defaultInstance {
  return [StatusResponse defaultInstance];
}
- (StatusResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StatusResponse*) buildPartial {
  StatusResponse* returnMe = resultStatusResponse;
  self.resultStatusResponse = nil;
  return returnMe;
}
- (StatusResponseBuilder*) mergeFrom:(StatusResponse*) other {
  if (other == [StatusResponse defaultInstance]) {
    return self;
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasServer) {
    [self mergeServer:other.server];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StatusResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StatusResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        ServerStatus value = (ServerStatus)[input readEnum];
        if (ServerStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        ServerBuilder* subBuilder = [Server builder];
        if (self.hasServer) {
          [subBuilder mergeFrom:self.server];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setServer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasStatus {
  return resultStatusResponse.hasStatus;
}
- (ServerStatus) status {
  return resultStatusResponse.status;
}
- (StatusResponseBuilder*) setStatus:(ServerStatus) value {
  resultStatusResponse.hasStatus = YES;
  resultStatusResponse.status = value;
  return self;
}
- (StatusResponseBuilder*) clearStatus {
  resultStatusResponse.hasStatus = NO;
  resultStatusResponse.status = ServerStatusConnected;
  return self;
}
- (BOOL) hasServer {
  return resultStatusResponse.hasServer;
}
- (Server*) server {
  return resultStatusResponse.server;
}
- (StatusResponseBuilder*) setServer:(Server*) value {
  resultStatusResponse.hasServer = YES;
  resultStatusResponse.server = value;
  return self;
}
- (StatusResponseBuilder*) setServerBuilder:(ServerBuilder*) builderForValue {
  return [self setServer:[builderForValue build]];
}
- (StatusResponseBuilder*) mergeServer:(Server*) value {
  if (resultStatusResponse.hasServer &&
      resultStatusResponse.server != [Server defaultInstance]) {
    resultStatusResponse.server =
      [[[Server builderWithPrototype:resultStatusResponse.server] mergeFrom:value] buildPartial];
  } else {
    resultStatusResponse.server = value;
  }
  resultStatusResponse.hasServer = YES;
  return self;
}
- (StatusResponseBuilder*) clearServer {
  resultStatusResponse.hasServer = NO;
  resultStatusResponse.server = [Server defaultInstance];
  return self;
}
@end

@interface XPCRequest ()
@property Type type;
@property (strong) PathesRequest* pathes;
@property (strong) Server* connect;
@end

@implementation XPCRequest

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPathes {
  return !!hasPathes_;
}
- (void) setHasPathes:(BOOL) _value_ {
  hasPathes_ = !!_value_;
}
@synthesize pathes;
- (BOOL) hasConnect {
  return !!hasConnect_;
}
- (void) setHasConnect:(BOOL) _value_ {
  hasConnect_ = !!_value_;
}
@synthesize connect;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = TypeVersion;
    self.pathes = [PathesRequest defaultInstance];
    self.connect = [Server defaultInstance];
  }
  return self;
}
static XPCRequest* defaultXPCRequestInstance = nil;
+ (void) initialize {
  if (self == [XPCRequest class]) {
    defaultXPCRequestInstance = [[XPCRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXPCRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultXPCRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasPathes) {
    if (!self.pathes.isInitialized) {
      return NO;
    }
  }
  if (self.hasConnect) {
    if (!self.connect.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasPathes) {
    [output writeMessage:2 value:self.pathes];
  }
  if (self.hasConnect) {
    [output writeMessage:3 value:self.connect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasPathes) {
    size_ += computeMessageSize(2, self.pathes);
  }
  if (self.hasConnect) {
    size_ += computeMessageSize(3, self.connect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XPCRequest*) parseFromData:(NSData*) data {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromData:data] build];
}
+ (XPCRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XPCRequest*) parseFromInputStream:(NSInputStream*) input {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromInputStream:input] build];
}
+ (XPCRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XPCRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromCodedInputStream:input] build];
}
+ (XPCRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCRequest*)[[[XPCRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XPCRequestBuilder*) builder {
  return [[XPCRequestBuilder alloc] init];
}
+ (XPCRequestBuilder*) builderWithPrototype:(XPCRequest*) prototype {
  return [[XPCRequest builder] mergeFrom:prototype];
}
- (XPCRequestBuilder*) builder {
  return [XPCRequest builder];
}
- (XPCRequestBuilder*) toBuilder {
  return [XPCRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromType(self.type)];
  }
  if (self.hasPathes) {
    [output appendFormat:@"%@%@ {\n", indent, @"pathes"];
    [self.pathes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"connect"];
    [self.connect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasPathes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pathes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pathes"];
  }
  if (self.hasConnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.connect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"connect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XPCRequest class]]) {
    return NO;
  }
  XPCRequest *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasPathes == otherMessage.hasPathes &&
      (!self.hasPathes || [self.pathes isEqual:otherMessage.pathes]) &&
      self.hasConnect == otherMessage.hasConnect &&
      (!self.hasConnect || [self.connect isEqual:otherMessage.connect]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasPathes) {
    hashCode = hashCode * 31 + [self.pathes hash];
  }
  if (self.hasConnect) {
    hashCode = hashCode * 31 + [self.connect hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XPCRequestBuilder()
@property (strong) XPCRequest* resultXpcrequest;
@end

@implementation XPCRequestBuilder
@synthesize resultXpcrequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultXpcrequest = [[XPCRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultXpcrequest;
}
- (XPCRequestBuilder*) clear {
  self.resultXpcrequest = [[XPCRequest alloc] init];
  return self;
}
- (XPCRequestBuilder*) clone {
  return [XPCRequest builderWithPrototype:resultXpcrequest];
}
- (XPCRequest*) defaultInstance {
  return [XPCRequest defaultInstance];
}
- (XPCRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XPCRequest*) buildPartial {
  XPCRequest* returnMe = resultXpcrequest;
  self.resultXpcrequest = nil;
  return returnMe;
}
- (XPCRequestBuilder*) mergeFrom:(XPCRequest*) other {
  if (other == [XPCRequest defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPathes) {
    [self mergePathes:other.pathes];
  }
  if (other.hasConnect) {
    [self mergeConnect:other.connect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XPCRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XPCRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        Type value = (Type)[input readEnum];
        if (TypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        PathesRequestBuilder* subBuilder = [PathesRequest builder];
        if (self.hasPathes) {
          [subBuilder mergeFrom:self.pathes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPathes:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        ServerBuilder* subBuilder = [Server builder];
        if (self.hasConnect) {
          [subBuilder mergeFrom:self.connect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConnect:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultXpcrequest.hasType;
}
- (Type) type {
  return resultXpcrequest.type;
}
- (XPCRequestBuilder*) setType:(Type) value {
  resultXpcrequest.hasType = YES;
  resultXpcrequest.type = value;
  return self;
}
- (XPCRequestBuilder*) clearType {
  resultXpcrequest.hasType = NO;
  resultXpcrequest.type = TypeVersion;
  return self;
}
- (BOOL) hasPathes {
  return resultXpcrequest.hasPathes;
}
- (PathesRequest*) pathes {
  return resultXpcrequest.pathes;
}
- (XPCRequestBuilder*) setPathes:(PathesRequest*) value {
  resultXpcrequest.hasPathes = YES;
  resultXpcrequest.pathes = value;
  return self;
}
- (XPCRequestBuilder*) setPathesBuilder:(PathesRequestBuilder*) builderForValue {
  return [self setPathes:[builderForValue build]];
}
- (XPCRequestBuilder*) mergePathes:(PathesRequest*) value {
  if (resultXpcrequest.hasPathes &&
      resultXpcrequest.pathes != [PathesRequest defaultInstance]) {
    resultXpcrequest.pathes =
      [[[PathesRequest builderWithPrototype:resultXpcrequest.pathes] mergeFrom:value] buildPartial];
  } else {
    resultXpcrequest.pathes = value;
  }
  resultXpcrequest.hasPathes = YES;
  return self;
}
- (XPCRequestBuilder*) clearPathes {
  resultXpcrequest.hasPathes = NO;
  resultXpcrequest.pathes = [PathesRequest defaultInstance];
  return self;
}
- (BOOL) hasConnect {
  return resultXpcrequest.hasConnect;
}
- (Server*) connect {
  return resultXpcrequest.connect;
}
- (XPCRequestBuilder*) setConnect:(Server*) value {
  resultXpcrequest.hasConnect = YES;
  resultXpcrequest.connect = value;
  return self;
}
- (XPCRequestBuilder*) setConnectBuilder:(ServerBuilder*) builderForValue {
  return [self setConnect:[builderForValue build]];
}
- (XPCRequestBuilder*) mergeConnect:(Server*) value {
  if (resultXpcrequest.hasConnect &&
      resultXpcrequest.connect != [Server defaultInstance]) {
    resultXpcrequest.connect =
      [[[Server builderWithPrototype:resultXpcrequest.connect] mergeFrom:value] buildPartial];
  } else {
    resultXpcrequest.connect = value;
  }
  resultXpcrequest.hasConnect = YES;
  return self;
}
- (XPCRequestBuilder*) clearConnect {
  resultXpcrequest.hasConnect = NO;
  resultXpcrequest.connect = [Server defaultInstance];
  return self;
}
@end

@interface XPCResponse ()
@property Type type;
@property (strong) VersionResponse* version;
@property (strong) PathesResponse* pathes;
@property (strong) StatusResponse* status;
@property (strong) ConnectResponse* connect;
@property (strong) DisconnectResponse* disconnect;
@end

@implementation XPCResponse

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) _value_ {
  hasVersion_ = !!_value_;
}
@synthesize version;
- (BOOL) hasPathes {
  return !!hasPathes_;
}
- (void) setHasPathes:(BOOL) _value_ {
  hasPathes_ = !!_value_;
}
@synthesize pathes;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
- (BOOL) hasConnect {
  return !!hasConnect_;
}
- (void) setHasConnect:(BOOL) _value_ {
  hasConnect_ = !!_value_;
}
@synthesize connect;
- (BOOL) hasDisconnect {
  return !!hasDisconnect_;
}
- (void) setHasDisconnect:(BOOL) _value_ {
  hasDisconnect_ = !!_value_;
}
@synthesize disconnect;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = TypeVersion;
    self.version = [VersionResponse defaultInstance];
    self.pathes = [PathesResponse defaultInstance];
    self.status = [StatusResponse defaultInstance];
    self.connect = [ConnectResponse defaultInstance];
    self.disconnect = [DisconnectResponse defaultInstance];
  }
  return self;
}
static XPCResponse* defaultXPCResponseInstance = nil;
+ (void) initialize {
  if (self == [XPCResponse class]) {
    defaultXPCResponseInstance = [[XPCResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultXPCResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultXPCResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  if (self.hasVersion) {
    if (!self.version.isInitialized) {
      return NO;
    }
  }
  if (self.hasPathes) {
    if (!self.pathes.isInitialized) {
      return NO;
    }
  }
  if (self.hasStatus) {
    if (!self.status.isInitialized) {
      return NO;
    }
  }
  if (self.hasConnect) {
    if (!self.connect.isInitialized) {
      return NO;
    }
  }
  if (self.hasDisconnect) {
    if (!self.disconnect.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasVersion) {
    [output writeMessage:2 value:self.version];
  }
  if (self.hasPathes) {
    [output writeMessage:3 value:self.pathes];
  }
  if (self.hasStatus) {
    [output writeMessage:4 value:self.status];
  }
  if (self.hasConnect) {
    [output writeMessage:5 value:self.connect];
  }
  if (self.hasDisconnect) {
    [output writeMessage:6 value:self.disconnect];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasVersion) {
    size_ += computeMessageSize(2, self.version);
  }
  if (self.hasPathes) {
    size_ += computeMessageSize(3, self.pathes);
  }
  if (self.hasStatus) {
    size_ += computeMessageSize(4, self.status);
  }
  if (self.hasConnect) {
    size_ += computeMessageSize(5, self.connect);
  }
  if (self.hasDisconnect) {
    size_ += computeMessageSize(6, self.disconnect);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (XPCResponse*) parseFromData:(NSData*) data {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromData:data] build];
}
+ (XPCResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (XPCResponse*) parseFromInputStream:(NSInputStream*) input {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromInputStream:input] build];
}
+ (XPCResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XPCResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromCodedInputStream:input] build];
}
+ (XPCResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (XPCResponse*)[[[XPCResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (XPCResponseBuilder*) builder {
  return [[XPCResponseBuilder alloc] init];
}
+ (XPCResponseBuilder*) builderWithPrototype:(XPCResponse*) prototype {
  return [[XPCResponse builder] mergeFrom:prototype];
}
- (XPCResponseBuilder*) builder {
  return [XPCResponse builder];
}
- (XPCResponseBuilder*) toBuilder {
  return [XPCResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromType(self.type)];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@ {\n", indent, @"version"];
    [self.version writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPathes) {
    [output appendFormat:@"%@%@ {\n", indent, @"pathes"];
    [self.pathes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@ {\n", indent, @"status"];
    [self.status writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"connect"];
    [self.connect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDisconnect) {
    [output appendFormat:@"%@%@ {\n", indent, @"disconnect"];
    [self.disconnect writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasType) {
    [dictionary setObject: @(self.type) forKey: @"type"];
  }
  if (self.hasVersion) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.version storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"version"];
  }
  if (self.hasPathes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.pathes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"pathes"];
  }
  if (self.hasStatus) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.status storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"status"];
  }
  if (self.hasConnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.connect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"connect"];
  }
  if (self.hasDisconnect) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.disconnect storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"disconnect"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[XPCResponse class]]) {
    return NO;
  }
  XPCResponse *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || [self.version isEqual:otherMessage.version]) &&
      self.hasPathes == otherMessage.hasPathes &&
      (!self.hasPathes || [self.pathes isEqual:otherMessage.pathes]) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || [self.status isEqual:otherMessage.status]) &&
      self.hasConnect == otherMessage.hasConnect &&
      (!self.hasConnect || [self.connect isEqual:otherMessage.connect]) &&
      self.hasDisconnect == otherMessage.hasDisconnect &&
      (!self.hasDisconnect || [self.disconnect isEqual:otherMessage.disconnect]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [self.version hash];
  }
  if (self.hasPathes) {
    hashCode = hashCode * 31 + [self.pathes hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [self.status hash];
  }
  if (self.hasConnect) {
    hashCode = hashCode * 31 + [self.connect hash];
  }
  if (self.hasDisconnect) {
    hashCode = hashCode * 31 + [self.disconnect hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface XPCResponseBuilder()
@property (strong) XPCResponse* resultXpcresponse;
@end

@implementation XPCResponseBuilder
@synthesize resultXpcresponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultXpcresponse = [[XPCResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultXpcresponse;
}
- (XPCResponseBuilder*) clear {
  self.resultXpcresponse = [[XPCResponse alloc] init];
  return self;
}
- (XPCResponseBuilder*) clone {
  return [XPCResponse builderWithPrototype:resultXpcresponse];
}
- (XPCResponse*) defaultInstance {
  return [XPCResponse defaultInstance];
}
- (XPCResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (XPCResponse*) buildPartial {
  XPCResponse* returnMe = resultXpcresponse;
  self.resultXpcresponse = nil;
  return returnMe;
}
- (XPCResponseBuilder*) mergeFrom:(XPCResponse*) other {
  if (other == [XPCResponse defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasVersion) {
    [self mergeVersion:other.version];
  }
  if (other.hasPathes) {
    [self mergePathes:other.pathes];
  }
  if (other.hasStatus) {
    [self mergeStatus:other.status];
  }
  if (other.hasConnect) {
    [self mergeConnect:other.connect];
  }
  if (other.hasDisconnect) {
    [self mergeDisconnect:other.disconnect];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (XPCResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (XPCResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        Type value = (Type)[input readEnum];
        if (TypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        VersionResponseBuilder* subBuilder = [VersionResponse builder];
        if (self.hasVersion) {
          [subBuilder mergeFrom:self.version];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVersion:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PathesResponseBuilder* subBuilder = [PathesResponse builder];
        if (self.hasPathes) {
          [subBuilder mergeFrom:self.pathes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPathes:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        StatusResponseBuilder* subBuilder = [StatusResponse builder];
        if (self.hasStatus) {
          [subBuilder mergeFrom:self.status];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStatus:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ConnectResponseBuilder* subBuilder = [ConnectResponse builder];
        if (self.hasConnect) {
          [subBuilder mergeFrom:self.connect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConnect:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        DisconnectResponseBuilder* subBuilder = [DisconnectResponse builder];
        if (self.hasDisconnect) {
          [subBuilder mergeFrom:self.disconnect];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDisconnect:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultXpcresponse.hasType;
}
- (Type) type {
  return resultXpcresponse.type;
}
- (XPCResponseBuilder*) setType:(Type) value {
  resultXpcresponse.hasType = YES;
  resultXpcresponse.type = value;
  return self;
}
- (XPCResponseBuilder*) clearType {
  resultXpcresponse.hasType = NO;
  resultXpcresponse.type = TypeVersion;
  return self;
}
- (BOOL) hasVersion {
  return resultXpcresponse.hasVersion;
}
- (VersionResponse*) version {
  return resultXpcresponse.version;
}
- (XPCResponseBuilder*) setVersion:(VersionResponse*) value {
  resultXpcresponse.hasVersion = YES;
  resultXpcresponse.version = value;
  return self;
}
- (XPCResponseBuilder*) setVersionBuilder:(VersionResponseBuilder*) builderForValue {
  return [self setVersion:[builderForValue build]];
}
- (XPCResponseBuilder*) mergeVersion:(VersionResponse*) value {
  if (resultXpcresponse.hasVersion &&
      resultXpcresponse.version != [VersionResponse defaultInstance]) {
    resultXpcresponse.version =
      [[[VersionResponse builderWithPrototype:resultXpcresponse.version] mergeFrom:value] buildPartial];
  } else {
    resultXpcresponse.version = value;
  }
  resultXpcresponse.hasVersion = YES;
  return self;
}
- (XPCResponseBuilder*) clearVersion {
  resultXpcresponse.hasVersion = NO;
  resultXpcresponse.version = [VersionResponse defaultInstance];
  return self;
}
- (BOOL) hasPathes {
  return resultXpcresponse.hasPathes;
}
- (PathesResponse*) pathes {
  return resultXpcresponse.pathes;
}
- (XPCResponseBuilder*) setPathes:(PathesResponse*) value {
  resultXpcresponse.hasPathes = YES;
  resultXpcresponse.pathes = value;
  return self;
}
- (XPCResponseBuilder*) setPathesBuilder:(PathesResponseBuilder*) builderForValue {
  return [self setPathes:[builderForValue build]];
}
- (XPCResponseBuilder*) mergePathes:(PathesResponse*) value {
  if (resultXpcresponse.hasPathes &&
      resultXpcresponse.pathes != [PathesResponse defaultInstance]) {
    resultXpcresponse.pathes =
      [[[PathesResponse builderWithPrototype:resultXpcresponse.pathes] mergeFrom:value] buildPartial];
  } else {
    resultXpcresponse.pathes = value;
  }
  resultXpcresponse.hasPathes = YES;
  return self;
}
- (XPCResponseBuilder*) clearPathes {
  resultXpcresponse.hasPathes = NO;
  resultXpcresponse.pathes = [PathesResponse defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return resultXpcresponse.hasStatus;
}
- (StatusResponse*) status {
  return resultXpcresponse.status;
}
- (XPCResponseBuilder*) setStatus:(StatusResponse*) value {
  resultXpcresponse.hasStatus = YES;
  resultXpcresponse.status = value;
  return self;
}
- (XPCResponseBuilder*) setStatusBuilder:(StatusResponseBuilder*) builderForValue {
  return [self setStatus:[builderForValue build]];
}
- (XPCResponseBuilder*) mergeStatus:(StatusResponse*) value {
  if (resultXpcresponse.hasStatus &&
      resultXpcresponse.status != [StatusResponse defaultInstance]) {
    resultXpcresponse.status =
      [[[StatusResponse builderWithPrototype:resultXpcresponse.status] mergeFrom:value] buildPartial];
  } else {
    resultXpcresponse.status = value;
  }
  resultXpcresponse.hasStatus = YES;
  return self;
}
- (XPCResponseBuilder*) clearStatus {
  resultXpcresponse.hasStatus = NO;
  resultXpcresponse.status = [StatusResponse defaultInstance];
  return self;
}
- (BOOL) hasConnect {
  return resultXpcresponse.hasConnect;
}
- (ConnectResponse*) connect {
  return resultXpcresponse.connect;
}
- (XPCResponseBuilder*) setConnect:(ConnectResponse*) value {
  resultXpcresponse.hasConnect = YES;
  resultXpcresponse.connect = value;
  return self;
}
- (XPCResponseBuilder*) setConnectBuilder:(ConnectResponseBuilder*) builderForValue {
  return [self setConnect:[builderForValue build]];
}
- (XPCResponseBuilder*) mergeConnect:(ConnectResponse*) value {
  if (resultXpcresponse.hasConnect &&
      resultXpcresponse.connect != [ConnectResponse defaultInstance]) {
    resultXpcresponse.connect =
      [[[ConnectResponse builderWithPrototype:resultXpcresponse.connect] mergeFrom:value] buildPartial];
  } else {
    resultXpcresponse.connect = value;
  }
  resultXpcresponse.hasConnect = YES;
  return self;
}
- (XPCResponseBuilder*) clearConnect {
  resultXpcresponse.hasConnect = NO;
  resultXpcresponse.connect = [ConnectResponse defaultInstance];
  return self;
}
- (BOOL) hasDisconnect {
  return resultXpcresponse.hasDisconnect;
}
- (DisconnectResponse*) disconnect {
  return resultXpcresponse.disconnect;
}
- (XPCResponseBuilder*) setDisconnect:(DisconnectResponse*) value {
  resultXpcresponse.hasDisconnect = YES;
  resultXpcresponse.disconnect = value;
  return self;
}
- (XPCResponseBuilder*) setDisconnectBuilder:(DisconnectResponseBuilder*) builderForValue {
  return [self setDisconnect:[builderForValue build]];
}
- (XPCResponseBuilder*) mergeDisconnect:(DisconnectResponse*) value {
  if (resultXpcresponse.hasDisconnect &&
      resultXpcresponse.disconnect != [DisconnectResponse defaultInstance]) {
    resultXpcresponse.disconnect =
      [[[DisconnectResponse builderWithPrototype:resultXpcresponse.disconnect] mergeFrom:value] buildPartial];
  } else {
    resultXpcresponse.disconnect = value;
  }
  resultXpcresponse.hasDisconnect = YES;
  return self;
}
- (XPCResponseBuilder*) clearDisconnect {
  resultXpcresponse.hasDisconnect = NO;
  resultXpcresponse.disconnect = [DisconnectResponse defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
