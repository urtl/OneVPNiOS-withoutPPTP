// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xpc.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ConnectResponse;
@class DisconnectResponse;
@class PathesRequest;
@class PathesResponse;
@class Server;
@class StatusResponse;
@class VersionResponse;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Type

typedef GPB_ENUM(Type) {
  Type_Version = 0,
  Type_Pathes = 1,
  Type_Status = 2,
  Type_Connect = 3,
  Type_Disconnect = 4,
};

GPBEnumDescriptor *Type_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL Type_IsValidValue(int32_t value);

#pragma mark - Enum Protocol_Enum

typedef GPB_ENUM(Protocol_Enum) {
  Protocol_Enum_Pptp = 0,
  Protocol_Enum_L2Tp = 1,
  Protocol_Enum_Tcp = 2,
  Protocol_Enum_Udp = 3,
};

GPBEnumDescriptor *Protocol_Enum_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL Protocol_Enum_IsValidValue(int32_t value);

#pragma mark - Enum ExtStatus

typedef GPB_ENUM(ExtStatus) {
  ExtStatus_Success = 0,
  ExtStatus_AuthFailed = 1,
  ExtStatus_OtherFailed = 2,
};

GPBEnumDescriptor *ExtStatus_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL ExtStatus_IsValidValue(int32_t value);

#pragma mark - Enum Status

typedef GPB_ENUM(Status) {
  Status_Ok = 0,
  Status_Fail = 1,
};

GPBEnumDescriptor *Status_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL Status_IsValidValue(int32_t value);

#pragma mark - Enum ServerStatus

typedef GPB_ENUM(ServerStatus) {
  ServerStatus_Connected = 0,
  ServerStatus_Disconnected = 1,
};

GPBEnumDescriptor *ServerStatus_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL ServerStatus_IsValidValue(int32_t value);

#pragma mark - XpcRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface XpcRoot : GPBRootObject
@end

#pragma mark - PathesRequest

typedef GPB_ENUM(PathesRequest_FieldNumber) {
  PathesRequest_FieldNumber_OvpnPath = 1,
  PathesRequest_FieldNumber_PppdPath = 2,
};

@interface PathesRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *ovpnPath;
/// Test to see if @c ovpnPath has been set.
@property(nonatomic, readwrite) BOOL hasOvpnPath;

@property(nonatomic, readwrite, copy, null_resettable) NSString *pppdPath;
/// Test to see if @c pppdPath has been set.
@property(nonatomic, readwrite) BOOL hasPppdPath;

@end

#pragma mark - VersionResponse

typedef GPB_ENUM(VersionResponse_FieldNumber) {
  VersionResponse_FieldNumber_MajorVersion = 1,
  VersionResponse_FieldNumber_MinorVersion = 2,
};

@interface VersionResponse : GPBMessage

@property(nonatomic, readwrite) int32_t majorVersion;

@property(nonatomic, readwrite) BOOL hasMajorVersion;
@property(nonatomic, readwrite) int32_t minorVersion;

@property(nonatomic, readwrite) BOOL hasMinorVersion;
@end

#pragma mark - Server

typedef GPB_ENUM(Server_FieldNumber) {
  Server_FieldNumber_Id_p = 1,
  Server_FieldNumber_Country = 2,
  Server_FieldNumber_Name = 3,
  Server_FieldNumber_Dns = 4,
  Server_FieldNumber_Port = 5,
  Server_FieldNumber_Protocol = 6,
  Server_FieldNumber_Login = 7,
  Server_FieldNumber_Password = 8,
};

@interface Server : GPBMessage

@property(nonatomic, readwrite) int32_t id_p;

@property(nonatomic, readwrite) BOOL hasId_p;
@property(nonatomic, readwrite, copy, null_resettable) NSString *country;
/// Test to see if @c country has been set.
@property(nonatomic, readwrite) BOOL hasCountry;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;
/// Test to see if @c name has been set.
@property(nonatomic, readwrite) BOOL hasName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *dns;
/// Test to see if @c dns has been set.
@property(nonatomic, readwrite) BOOL hasDns;

@property(nonatomic, readwrite) int32_t port;

@property(nonatomic, readwrite) BOOL hasPort;
@property(nonatomic, readwrite) Protocol_Enum protocol;

@property(nonatomic, readwrite) BOOL hasProtocol;
@property(nonatomic, readwrite, copy, null_resettable) NSString *login;
/// Test to see if @c login has been set.
@property(nonatomic, readwrite) BOOL hasLogin;

@property(nonatomic, readwrite, copy, null_resettable) NSString *password;
/// Test to see if @c password has been set.
@property(nonatomic, readwrite) BOOL hasPassword;

@end

#pragma mark - PathesResponse

typedef GPB_ENUM(PathesResponse_FieldNumber) {
  PathesResponse_FieldNumber_Status = 1,
};

@interface PathesResponse : GPBMessage

@property(nonatomic, readwrite) Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - ConnectResponse

typedef GPB_ENUM(ConnectResponse_FieldNumber) {
  ConnectResponse_FieldNumber_Status = 1,
  ConnectResponse_FieldNumber_ExtStatus = 2,
};

@interface ConnectResponse : GPBMessage

@property(nonatomic, readwrite) Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite) ExtStatus extStatus;

@property(nonatomic, readwrite) BOOL hasExtStatus;
@end

#pragma mark - DisconnectResponse

typedef GPB_ENUM(DisconnectResponse_FieldNumber) {
  DisconnectResponse_FieldNumber_Status = 1,
};

@interface DisconnectResponse : GPBMessage

@property(nonatomic, readwrite) Status status;

@property(nonatomic, readwrite) BOOL hasStatus;
@end

#pragma mark - StatusResponse

typedef GPB_ENUM(StatusResponse_FieldNumber) {
  StatusResponse_FieldNumber_Status = 1,
  StatusResponse_FieldNumber_Server = 2,
};

@interface StatusResponse : GPBMessage

@property(nonatomic, readwrite) ServerStatus status;

@property(nonatomic, readwrite) BOOL hasStatus;
@property(nonatomic, readwrite, strong, null_resettable) Server *server;
/// Test to see if @c server has been set.
@property(nonatomic, readwrite) BOOL hasServer;

@end

#pragma mark - XPCRequest

typedef GPB_ENUM(XPCRequest_FieldNumber) {
  XPCRequest_FieldNumber_Type = 1,
  XPCRequest_FieldNumber_Pathes = 2,
  XPCRequest_FieldNumber_Connect = 3,
};

typedef GPB_ENUM(XPCRequest_Msg_OneOfCase) {
  XPCRequest_Msg_OneOfCase_GPBUnsetOneOfCase = 0,
  XPCRequest_Msg_OneOfCase_Pathes = 2,
  XPCRequest_Msg_OneOfCase_Connect = 3,
};

@interface XPCRequest : GPBMessage

@property(nonatomic, readwrite) Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readonly) XPCRequest_Msg_OneOfCase msgOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) PathesRequest *pathes;

@property(nonatomic, readwrite, strong, null_resettable) Server *connect;

@end

/// Clears whatever value was set for the oneof 'msg'.
void XPCRequest_ClearMsgOneOfCase(XPCRequest *message);

#pragma mark - XPCResponse

typedef GPB_ENUM(XPCResponse_FieldNumber) {
  XPCResponse_FieldNumber_Type = 1,
  XPCResponse_FieldNumber_Version = 2,
  XPCResponse_FieldNumber_Pathes = 3,
  XPCResponse_FieldNumber_Status = 4,
  XPCResponse_FieldNumber_Connect = 5,
  XPCResponse_FieldNumber_Disconnect = 6,
};

typedef GPB_ENUM(XPCResponse_Msg_OneOfCase) {
  XPCResponse_Msg_OneOfCase_GPBUnsetOneOfCase = 0,
  XPCResponse_Msg_OneOfCase_Version = 2,
  XPCResponse_Msg_OneOfCase_Pathes = 3,
  XPCResponse_Msg_OneOfCase_Status = 4,
  XPCResponse_Msg_OneOfCase_Connect = 5,
  XPCResponse_Msg_OneOfCase_Disconnect = 6,
};

@interface XPCResponse : GPBMessage

@property(nonatomic, readwrite) Type type;

@property(nonatomic, readwrite) BOOL hasType;
@property(nonatomic, readonly) XPCResponse_Msg_OneOfCase msgOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) VersionResponse *version;

@property(nonatomic, readwrite, strong, null_resettable) PathesResponse *pathes;

@property(nonatomic, readwrite, strong, null_resettable) StatusResponse *status;

@property(nonatomic, readwrite, strong, null_resettable) ConnectResponse *connect;

@property(nonatomic, readwrite, strong, null_resettable) DisconnectResponse *disconnect;

@end

/// Clears whatever value was set for the oneof 'msg'.
void XPCResponse_ClearMsgOneOfCase(XPCResponse *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
